/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/weathers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 주간 날씨 조회
         * @description 위도와 경도를 이용하여 주간 날씨 정보를 조회합니다.
         */
        get: operations["getWeeklyWeather"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/weathers/{date}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 특정 날짜 날씨 조회
         * @description 위도와 경도를 이용하여 특정 날짜의 날씨 정보를 조회합니다.
         */
        get: operations["getWeatherByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커멘트 다건 조회
         * @description location, date, feelsLikeTemperature 파라미터를 사용하여 커멘트 목록을 조회합니다.
         */
        get: operations["getComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/comments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 커멘트 단건 조회
         * @description ID로 커멘트를 조회합니다.
         */
        get: operations["getComment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/cloth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOutfitWithPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        WeatherInfoDto: {
            /** Format: int32 */
            id: number;
            weather: string;
            description?: string;
            /** Format: double */
            dailyTemperatureGap: number;
            /** Format: double */
            feelsLikeTemperature: number;
            /** Format: double */
            maxTemperature: number;
            /** Format: double */
            minTemperature: number;
            /** Format: double */
            pop?: number;
            /** Format: double */
            rain?: number;
            /** Format: double */
            snow?: number;
            /** Format: int32 */
            humidity?: number;
            /** Format: double */
            windSpeed?: number;
            /** Format: int32 */
            windDeg?: number;
            /** Format: double */
            uvi?: number;
            location: string;
            /** Format: date */
            date: string;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        CommentDto: {
            /** Format: int32 */
            id: number;
            email: string;
            imageUrl?: string;
            sentence: string;
            tagString: string;
            weatherInfoDto: components["schemas"]["WeatherInfoDto"];
        };
        PageCommentDto: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["CommentDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            /** Format: int32 */
            numberOfElements?: number;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        TripSchedule: {
            place: string;
            /** Format: date */
            start?: string;
            /** Format: date */
            end?: string;
        };
        Clothing: unknown;
        OutfitResponse: {
            clothes?: {
                [key: string]: components["schemas"]["Clothing"][];
            };
            extraClothes?: {
                [key: string]: components["schemas"]["Clothing"][];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getWeeklyWeather: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["WeatherInfoDto"][];
                };
            };
        };
    };
    getWeatherByDate: {
        parameters: {
            query: {
                lat: number;
                lon: number;
            };
            header?: never;
            path: {
                date: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["WeatherInfoDto"];
                };
            };
        };
    };
    getComments: {
        parameters: {
            query: {
                location?: string;
                date?: string;
                feelsLikeTemperature?: number;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageCommentDto"];
                };
            };
        };
    };
    getComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CommentDto"];
                };
            };
        };
    };
    getOutfitWithPeriod: {
        parameters: {
            query: {
                tripSchedule: components["schemas"]["TripSchedule"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["OutfitResponse"];
                };
            };
        };
    };
}
